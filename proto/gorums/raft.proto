syntax = "proto3";

import "github.com/relab/gorums/gorums.proto";

package gorums;

service Raft {
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {
      option (gorums.qc_future) = true;
  }

  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {
      option (gorums.qc) = true;
  }

  rpc ClientCommand(ClientCommandRequest) returns (ClientCommandResponse);
}

message Entry {
  uint64 term = 1;

  ClientCommandRequest data = 2;
}

message RequestVoteRequest {
  uint32 candidateID = 1;

  uint64 term = 2;
  uint64 lastLogIndex = 3;
  uint64 lastLogTerm = 4;
}

message RequestVoteResponse {
  uint64 term = 1;
  uint64 requestTerm = 2;

  bool voteGranted = 3;
}

message AppendEntriesRequest {
  uint32 leaderID = 1;

  uint64 term = 2;
  uint64 prevLogIndex = 3;
  uint64 prevLogTerm = 4;
  uint64 commitIndex = 5;

  repeated Entry entries = 6;
}

message AppendEntriesResponse {
  repeated uint32 followerID = 1;

  uint64 term = 2;
  uint64 matchIndex = 3;

  bool success = 4;
}

enum Status {
  OK = 0;
  NOT_LEADER = -1;
  SESSION_EXPIRED = -2;
}

message ClientCommandRequest {
  uint32 clientID = 1;

  uint64 sequenceNumber = 2;

  string command = 3;
}

message ClientCommandResponse {
  Status status = 1;

  string response = 2;

  uint32 leaderHint = 3;

  uint32 clientID = 4;
}